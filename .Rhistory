points(this.content$lat, this.content$lng, col = "red", cex = .6, size = this.content$qtd_confirmation)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-33.69111, 2.81972), ylim = c(-72.89583, -34.80861), asp = 1)
plot(newmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-33.69111, 2.81972), ylim = c(-72.89583, -34.80861), asp = 1)
install.packages("maps")
install.packages("maps")
library(maps)
map("worldHires","Brazil")
library(maps) #mapas simples, eixos, escala, cidades
library(mapdata) #base de dados WorldHires e rios
library(rworldmap) #outra base de dados de mapas do mundo
library(maptools) #Ler ESRI shapefiles
library(mapproj) #Projeções e grids
library(ggmap) #Gmaps, OSM + mapas baseados em ggplot2
library(rgdal)
library(mapdata) #base de dados WorldHires e rios
library(rworldmap) #outra base de dados de mapas do mundo
library(maptools) #Ler ESRI shapefiles
library(mapproj) #Projeções e grids
library(ggmap) #Gmaps, OSM + mapas baseados em ggplot2
library(rgdal)
map("worldHires","Brazil")
map("world","Brazil")
map.axes()
map.scale(ratio = F, cex = 0.7)
par(mar=c(1,1,1,1))
map("world","Brazil")
map.axes()
map.scale(ratio = F, cex = 0.7)
points(this.content$lat, this.content$lng, col = "red", cex = .6, size = this.content$qtd_confirmation)
points(this.content$lat, this.content$lng, col = "red", cex = .6)
brasil.mapa <- borders("worldHires", regions = "Brazil", fill = "grey90", colour = "black")
brasil.mapa <- borders("worldHires", regions = "Brazil", fill = "grey90", colour = "black")
bra.map <- map_data("worldHires","Brazil")
mapa.1 <- ggplot() + brasil.mapa + coord_equal()  ##borders inclui o mapa como uma camada no fundo
mapa.1
ggplot() +
brasil.mapa + coord_equal() +
geom_points(aes(x  = this.content$lat, y = this.content$lng))
ggplot() +
brasil.mapa + coord_equal() +
points(aes(x  = this.content$lat, y = this.content$lng))
summary(this.content)
str(this.content)
this.content$lat <- as.numeric(this.content$lat)
this.content$lng <- as.numeric(this.content$lng)
par(mar=c(1,1,1,1))
brasil.mapa <- borders("worldHires", regions = "Brazil", fill = "grey90", colour = "black")
bra.map <- map_data("worldHires","Brazil")
ggplot() +
brasil.mapa + coord_equal() +
points(aes(x  = this.content$lat, y = this.content$lng))
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, aes(x  = lat, y = lng))
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lat, y = lng))
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat))
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat, size = qtd_confirmation))
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat, size = qtd_confirmation*1000))
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat, , fill = qtd_confirmation, size = qtd_confirmation))
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat, , fill = qtd_confirmation), size = qtd_confirmation)
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat, size = qtd_confirmation, fill = qtd_confirmation))
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat, size = qtd_confirmation, color = factor(name)))
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat, size = qtd_confirmation, colour = qtd_confirmation))
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat, size = qtd_confirmation, colour = qtd_confirmation))+
xlab("Longitude")+
ylab("Latitude")
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat, size = qtd_confirmation, colour = qtd_confirmation))+
xlab("Longitude")+
ylab("Latitude")=
scale_fill_discrete(name = "Dose")
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat, size = qtd_confirmation, colour = qtd_confirmation))+
xlab("Longitude")+
ylab("Latitude")+
scale_fill_discrete(name = "Dose")
?readLines
#reading data
rawHTML <- readLines(url_state, encoding = 'Latin-1' )
sate_data <- fromJSON(rawHTML)
library(jsonlite)
sate_data <- fromJSON(rawHTML)
state_data <- fromJSON(rawHTML)
state_data$lat <- as.numeric(state_data$lat)
state_data$lng <- as.numeric(state_data$lng)
View(sate_data)
View(state_data)
colnames(state_data) <- c("lat", "lng", "Estado", "Casos Confirmados")
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat, size = Casos Confirmados, colour = Casos Confirmados))+
xlab("Longitude")+
ylab("Latitude")+
scale_fill_discrete(name = "Dose")
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat, size = Casos Confirmados, colour = Casos Confirmados))+
xlab("Longitude")+
ylab("Latitude")
par(mar=c(1,1,1,1))
brasil.mapa <- borders("worldHires", regions = "Brazil", fill = "grey90", colour = "black")
bra.map <- map_data("worldHires","Brazil")
ggplot() +
brasil.mapa + coord_equal() +
geom_point(this.content, mapping = aes(x  = lng, y = lat, size = qtd_confirmation, colour = qtd_confirmation))+
xlab("Longitude")+
ylab("Latitude")
ggplot() +
brasil.mapa + coord_equal() +
geom_point(state_data, mapping = aes(x  = lng, y = lat, size = Casos Confirmados,
colour = Casos confirmados))+
xlab("Longitude")+
ylab("Latitude")
state_data$lat <- as.numeric(state_data$lat)
state_data$lng <- as.numeric(state_data$lng)
ggplot() +
brasil.mapa + coord_equal() +
geom_point(state_data, mapping = aes(x  = lng, y = lat, size = Casos Confirmados,
colour = Casos confirmados))+
xlab("Longitude")+
ylab("Latitude")
rm(list = ls())
# Total de Dados por Estado
url_state <- "https://api.covid19.finspect.me/brcovid19/map"
#reading data
rawHTML <- readLines(url_state, encoding = 'Latin-1' )
state_data <- fromJSON(rawHTML)
state_data$lat <- as.numeric(state_data$lat)
state_data$lng <- as.numeric(state_data$lng)
colnames(state_data) <- c("lat", "lng", "Estado", "Casos.Confirmados")
par(mar=c(1,1,1,1))
brasil.mapa <- borders("worldHires", regions = "Brazil", fill = "grey90", colour = "black")
bra.map <- map_data("worldHires","Brazil")
ggplot() +
brasil.mapa + coord_equal() +
geom_point(state_data, mapping = aes(x  = lng, y = lat, size = Casos Confirmados,
colour = Casos confirmados))+
xlab("Longitude")+
ylab("Latitude")
ggplot() +
brasil.mapa + coord_equal() +
geom_point(state_data, mapping = aes(x  = lng, y = lat, size = Casos.Confirmados, colour = Casos.confirmados))+
xlab("Longitude")+
ylab("Latitude")
colnames(state_data) <- c("lat", "lng", "Estado", "Confirmados")
ggplot() +
brasil.mapa + coord_equal() +
geom_point(state_data, mapping = aes(x  = lng, y = lat, size = Confirmados, colour = Confirmados))+
xlab("Longitude")+
ylab("Latitude")
ggplot() +
brasil.mapa + coord_equal() +
geom_point(state_data, mapping = aes(x  = lng, y = lat, size = Confirmados, colour = Confirmados))+
xlab("Longitude")+
ylab("Latitude")+
ggtitle("Covid-19 Brasil")
#Aqui, os casos por região:
url_region <- "https://api.covid19.finspect.me/brcovid19/region"
#Aqui, os casos por região:
url_region <- "https://api.covid19.finspect.me/brcovid19/region"
#reading data
rawHTML <- readLines(url_state, encoding = 'Latin-1' )
region_data <- fromJSON(rawHTML)
View(region_data)
View(state_data)
View(region_data)
#reading data
rawHTML <- readLines(url_region, encoding = 'Latin-1' )
region_data <- fromJSON(rawHTML)
View(region_data)
#Aqui um resumo dos casos, das mortes e da letalidade:
resumo_url <- "https://api.covid19.finspect.me/brcovid19/all"
rawHTML <- readLines(resumo_url, encoding = 'Latin-1' )
resumo_data <- fromJSON(rawHTML)
View(resumo_data)
#Dados mundiais:
world_data_url <- "https://api.covid19.finspect.me/covid19"
rawHTML <- readLines(world_data_url, encoding = 'Latin-1' )
world_data <- fromJSON(rawHTML)
View(world_data)
rm(list = ls())
library(tibble)
library(httr)
library(rvest)
library(lubridate)
library(stringr)
library(purrr)
library(dplyr)
library(jsonlite)
library(rworldmap)
library(maps)
library(mapdata) #base de dados WorldHires e rios
library(rworldmap) #outra base de dados de mapas do mundo
library(maptools) #Ler ESRI shapefiles
library(mapproj) #Projeções e grids
library(ggmap) #Gmaps, OSM + mapas baseados em ggplot2
library(rgdal)
# Total de Dados por Estado
url_state <- "https://api.covid19.finspect.me/brcovid19/map"
#reading data
rawHTML <- readLines(url_state, encoding = 'Latin-1' )
state_data <- fromJSON(rawHTML)
state_data$lat <- as.numeric(state_data$lat)
state_data$lng <- as.numeric(state_data$lng)
colnames(state_data) <- c("lat", "lng", "Estado", "Confirmados")
#Aqui, os casos por região:
url_region <- "https://api.covid19.finspect.me/brcovid19/region"
#reading data
rawHTML <- readLines(url_region, encoding = 'Latin-1' )
region_data <- fromJSON(rawHTML)
#Aqui um resumo dos casos, das mortes e da letalidade:
resumo_url <- "https://api.covid19.finspect.me/brcovid19/all"
rawHTML <- readLines(resumo_url, encoding = 'Latin-1' )
resumo_data <- fromJSON(rawHTML)
#Dados mundiais:
world_data_url <- "https://api.covid19.finspect.me/covid19"
rawHTML <- readLines(world_data_url, encoding = 'Latin-1' )
world_data <- fromJSON(rawHTML)
View(world_data)
rm(list = ls())
x <- c(2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2, 1, 1.5, 1.1)
y <- c(2.4, 0.7, 2.9, 2.2, 3.0, 2.7, 1.6, 1.1, 1.6, 0.9)
plot(x, y, pch = 19)
library(shiny)
library(ggplot2)
library(plotly)
library(rmarkdown)
library(knitr)
library(pander)
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
fit <- lm(y ~ x)
plotly(x,y)
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
shiny::runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
x <- c(5, 10, 11, 12, 15, 20)
y <- c(5, 10, 11, 12, 15, 20)
plotly(x,y)
plot_ly(x,y)
dat <- data.frame(x,y)
plot_ly(x,y)
plot_ly(dat, x,y)
?plot_ly
plot_ly(dat, x,y, type = "scatter")
p <- ggplot(dat, aes(x = x, y = y)) +
geom_point() +
stat_smooth(method = "lm", se = input$se) +
ylab(input$ylab) +
xlab(input$xlab) +
theme_minimal()
p <- ggplot(dat, aes(x = x, y = y)) +
geom_point()
p
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
devtools::install_github('ropensci/plotly')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
shiny::runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
library(tibble)
install.packages("tibble")
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
?textInput
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
rm(list = ls())
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
y <- extract(input$y)
x <- c(5, 10, 11, 12, 15, 20)
y <- c(230, 235, 237, 239, 245, 260)
fit <- lm(y ~ x)
KN_med <- predict(fit, newdata = as.numeric(input$peso),
interval="confidence",
level = 0.95)
peso = 250
KN_med <- predict(fit, newdata = as.numeric(input$peso),
interval="confidence",
level = 0.95)
KN_med <- predict(fit, newdata = as.numeric(peso),
interval="confidence",
level = 0.95)
predict(fit, 250)
fit$coefficients[1]
fit$coefficients[2]
newx = seq(min(x),max(x),by = 0.05)
conf_interval <- predict(fit, newdata = data.frame(x = newx),
interval="confidence",
level = 0.95)
conf_interval
conf_interval = peso
conf_interval
conf_interval <- predict(fit, newdata = data.frame(x = newx),
interval="confidence",
level = 0.95)
conf_interval[1]
conf_interval[] = 250
conf_interval <- predict(fit, newdata = data.frame(x = newx),
interval="confidence",
level = 0.95)
which(conf_interval == 250)
which(conf_interval = 250)
which(conf_interval > 250)
which(conf_interval > 250 & < 250,5)
which(conf_interval > 250 & < 250.5)
which(conf_interval > 250 | < 250.5)
250*0,95
250*0.95
desvio = 5
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
library(rmarkdown)
shiny::runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
shiny::runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg')
library(shiny); runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg/app_multiplas_camadas.R')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg/app_multiplas_camadas.R')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg/app_multiplas_camadas.R')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg/app_multiplas_camadas.R')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg/app_multiplas_camadas.R')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg/app_multiplas_camadas.R')
runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg/app_multiplas_camadas.R')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Process Analytical Technology - Controle Peso vs Força Compressão"),
#h4("Marcelo M. Nobrega", col = "blue"),
#a(actionButton(inputId = "email1", label = "Marcelo M. Nobrega",
#               icon = icon("envelope", lib = "font-awesome")),
#  href="mailto:marcelo.nobrega@eurofarma.com.br"),
h4(tags$a(href = "mailto:marcelo.nobrega@eurofarma.com.br", "Marcelo Medre Nobrega")),
withMathJax(),
hr(),
# Sidebar Input data
sidebarLayout(
sidebarPanel(
tags$b("Entrada de Dados:"),
tags$b("Entrada de Dados Camada 1:"),
textInput("x1", "Força de Compressão camada 1 (KN)", value = "11, 11.5, 11.7, 11.9, 12, 12.5",
placeholder = "Insira os valores separados por vírgula, p.ex. 5.1, 10.2, 11.3"),
textInput("y1", "Peso da camada 1 (mg)", value = "225, 235, 237, 239, 245, 255",
placeholder = "Insira os valores separados por vírgula, p.ex. 230.1, 310.2, 411.3"),
hr(),
textInput("peso1", label = "Peso Desejado da Camada 1 (mg):", value = "250", placeholder = "250"),
hr(),
textInput("desvio1", label = "Desvio de Peso aceito na camada 1 + ou - (%):", value = "5", placeholder = "5"),
hr(),
# Camada 2
tags$b("Entrada de Dados Camada 2:"),
textInput("x2", "Força de Compressão camada 2 (KN)", value = "15, 16, 17, 18, 19, 20",
placeholder = "Insira os valores separados por vírgula, p.ex. 5.1, 10.2, 11.3"),
textInput("y2", "Peso da camada 2 (mg)", value = "350, 335, 337, 339, 345, 355",
placeholder = "Insira os valores separados por vírgula, p.ex. 230.1, 310.2, 411.3"),
hr(),
textInput("peso2", label = "Peso Desejado da Camada 2 (mg):", value = "250", placeholder = "250"),
hr(),
textInput("desvio2", label = "Desvio de Peso aceito na camada 2 + ou - (%):", value = "5", placeholder = "5"),
hr(),
# Camada 3
tags$b("Entrada de Dados Camada 3:"),
textInput("x3", "Força de Compressão camada 3 (KN)", value = "5, 10, 11, 12, 15, 20",
placeholder = "Insira os valores separados por vírgula, p.ex. 5.1, 10.2, 11.3"),
textInput("y3", "Peso da camada 3 (mg)", value = "225, 235, 237, 239, 245, 255",
placeholder = "Insira os valores separados por vírgula, p.ex. 230.1, 310.2, 411.3"),
hr(),
textInput("peso3", label = "Peso Desejado da Camada 3 (mg):", value = "250", placeholder = "250"),
hr(),
textInput("desvio3", label = "Desvio de Peso aceito na camada 3 + ou - (%):", value = "5", placeholder = "5"),
hr(),
tags$b("Plot:"),
textInput("xlab", label = "Título do eixo x:", value = "Força de Compressão kN", placeholder = "xlabel"),
textInput("ylab", label = "Título do eixo y:", value = "Peso mg", placeholder = "ylabel"),
checkboxInput("se", "Inserir intervalo de confiança na regressão?", FALSE),
hr(),
radioButtons("format", "Download report:", c("HTML", "PDF", "Word"),
inline = TRUE
),
#checkboxInput("echo", "Show code in report?", FALSE),
downloadButton("downloadReport"),
hr()
),
# Show a plot of the generated distribution
mainPanel(
tags$b("Seus Dados:"),
DT::dataTableOutput("tbl1"),
br(),
uiOutput("data1"),
br(),
plotOutput("plot1"),
br(),
tags$b("Interpretação:"),
uiOutput("interpretation1"),
br(),
tags$b("Faixa de Força de Trabalho para o peso desejado na Camada 1:"),
uiOutput("pesodesejado1"),
br(),
DT::dataTableOutput("tbl2"),
br(),
uiOutput("data2"),
br(),
plotOutput("plot2"),
br(),
tags$b("Interpretação:"),
uiOutput("interpretation2"),
br(),
tags$b("Faixa de Força de Trabalho para o peso desejado na Camada 2:"),
uiOutput("pesodesejado2"),
br(),
tags$b("Parâmetros Calculados:"),
verbatimTextOutput("summary1"),
br(),
uiOutput("results1"),
br(),
br(),
br()
)
)
)
library(shiny); runApp('C:/Users/Marcelo/Desktop/Data_Science/Data-Science-Specialization/Data products/Course Project/PATLinearReg/app_multiplas_camadas.R')
